# Конфигурация PortSentry
# (обычно расположен в /etc/portsentry/portsentry.conf)
#
# $Id: portsentry.conf.Debian,v 1.6 2001/07/19 21:02:20 agx Exp $
#
# Оригинальный portsentry.conf -- Крейг Роуленд <crowland@psionic.com>
# Изменено для Debian -- Гвидо Гюнтер <agx@debian.org>
# Перевод и адаптация для Школы 21 -- Сергей Еремин <erjemin@gmail.com>
#
# ВАЖНОЕ ЗАМЕЧАНИЕ: Вы НЕ МОЖЕТЕ ставить пробелы между номерами
# портов.
#
# Настройки портов по умолчанию позволяют захватывать большое количество
# основных проверок
#
# Все элементы должны быть в кавычках.


########################
# Конфигурации портов  #
########################
#
#
# Несколько примеров настроек для классического и основного Stealth-режима
#
# Мне всегда нравилотся всегда сохранить некоторые порты в нижнем конце диапазона.
# Это позволит быстро обнаружить последовательное сканирование портов
# и обычно эти порты не используются (например, tcpmux порт 1)
#
# **Пользователи X-Windows**: Если запускаете иксы (X) на сервере,
# нужно быть уверенным, что PortSentry не привязан к порту 6000 (или 2000 для
# пользователей OpenWindows). Это не позволит корректно запускать X-клиент.
#
# Эти привязки портов *игнорируются* для расширенного режима обнаружения скрытого
# сканирования (Advanced Stealth Scan Detection Mode).
#
# Раскомментируйте это для чрезвычайного анализа:
#TCP_PORTS="1,7,9,11,15,70,79,80,109,110,111,119,138,139,143,512,513,514,515,540,635,1080,1524,2000,2001,4000,4001,5742,6000,6001,6667,12345,12346,20034,27665,30303,32771,32772,32773,32774,31337,40421,40425,49724,54320"
#UDP_PORTS="1,7,9,66,67,68,69,111,137,138,161,162,474,513,517,518,635,640,641,666,700,2049,31335,27444,34555,32770,32771,32772,32773,32774,31337,54321"
#
# Используйте, если вы просто хотите знать:
TCP_PORTS="1,11,15,79,111,119,143,540,635,1080,1524,2000,5742,6667,12345,12346,20034,31337,32771,32772,32773,32774,40421,49724,54320"
UDP_PORTS="1,7,9,69,161,162,513,635,640,641,700,32770,32771,32772,32773,32774,31337,54321"
#
# Используйте, для поверхнотного анализа:
#TCP_PORTS="1,11,15,110,111,143,540,635,1080,1524,2000,12345,12346,20034,32771,32772,32773,32774,49724,54320"
#UDP_PORTS="1,7,9,69,161,162,513,640,700,32770,32771,32772,32773,32774,31337,54321"

# #####################################################
# Расширенные опции обнаружения скрытого сканирования #
#######################################################
#
# Это номера портов, , которые вы хотите, чтобы PortSentry отслеживал
# в расширенном режиме (Advanced mode). Любые порты *ниже* этого числа будут
# контролироваться. Прямо сейчас просматривается все ниже 1024.
#
# Во многих системах Linux вы не можете привязать порт 61000 (и выше).
# Это связано с тем, что эти порты используются как часть маскировки IP (маскарадинг).
# Не рекомендуется привязываться к этим номерам портов. В действительности:
# НЕ РЕКОМЕНДУЕТСЯ МОНИТОРИТЬ ДАЛЬШЕ 1024 ПОРТА, ЭТО ПРИВОДИТ К ЛОЖНЫМ ТРЕВОГАМ!
#
#
ADVANCED_PORTS_TCP="1024"
ADVANCED_PORTS_UDP="1024"
#
# Это поле сообщает PortSentry, какие номера портов (кроме прослушиваемых демонов)
# СЛЕДУЕТ ИГНОРИРОВАТЬ. Это полезно для служб, типа ident, которые ищут сервисы,
# типа FTP, SMTP и оболочки (wrappers), но вы не запускаете (и, скорее всего,
# *не должны* имхо).
#
# При указании здесь портов PortSentry просто не будет отвечать на входящие запросы,
# хотя в действительности PortSentry обрабатывает их, как если бы они были
# действительными связанными демонами. Порты по умолчанию считаются проблемными
# и источник ложных тревогам и, скорее всего, такие должны должны быть оставлены
# в покое для большинства случаев, кроме самых изолированных систем/сетей.
#
# TCP:
# • порт 113 -- ident (старая система идентификации, до сих пор используется в IRC-серверах)
# • порт 139 -- NetBIOS-SSN (служба сессий NetBIOS)
ADVANCED_EXCLUDE_TCP="113,139"
# UDP:
# • порт 520 -- локальный route-процесс маршрутизации, разновидность протокола Xerox NS (RIP)
# • порт 138 -- NetBIOS-DGM (служба датаграмм NetBIOS)
# • порт 137 -- NetBIOS-NM (служба имен NetBIOS)
# • порт 67  -- BOOTPS (Bootstrap Protocol Server загрузки бездисковых рабочих станций и DHCP)
# • порт 161 -- SNMP (Simple Network Management Protocol, порт прослушивания агентами удалённого
#               мониторинга и, в том числе, сканерами антивирусов)
ADVANCED_EXCLUDE_UDP="520,138,137,67,161"


##########################
# Конфигурационные файлы #
##########################
#
# в этом файле игнорируемые компьютеры
IGNORE_FILE="/etc/portsentry/portsentry.ignore"
# Хосты, которым было отказано в доступе (из истории работы)
HISTORY_FILE="/var/lib/portsentry/portsentry.history"
# Хосты, доступ которым заблокирован в текущей сессии (времмено, до следующей перезагрузки)
BLOCKED_FILE="/var/lib/portsentry/portsentry.blocked"

##################################
# Разное: Параметры конфигурации #
##################################
#
# Разрешение DNS-имен -- при установке значения «1» включается поиск имен атакующих
# хостов через DNS. Установка в «0» (или любое другое значение) отключит его.
RESOLVE_HOST="0"


#################
# Опции ответов #
#################
# Варианты "выпиливания" злоумышленника. Каждое действие будет выполнено, если обнаружена
# атака. Если вам не нужен конкретный вариант, закомментируйте его, и он будет пропущен.
#
# При обнаружении атаки переменная $TARGET$ будет заменена целевым атакующим хостом.
# Переменная $PORT$ будет заменена портом, который был отсканирован.
#
#######################
# Опции игнорирования #
#######################
# Эти опции позволяют включить параметры автоматического ответа для
# UDP/TCP. Это полезно, если вы хотите просто получать предупреждения
# о соединениях, но не хотите реагировать на конкретный протокол
# (или, например, хотите блокировать TCP, но не реагировать на UDP).
# Чтобы предотвратить возможную атаку типа «отказ в обслуживании» (DoS)
# на UDP и обнаружение скрытого сканирования для TCP, вы можете отключить
# блокировку, но оставьте предупреждение включенным.
# Лично я предпочитаю выжидать, пока это станет проблемой, хотя большинство
# злоумышленников на самом деле этого не делают. Третий вариант позволяет
# вам запускать внешнюю команду в случае сканирования. Это позволит зафиксировать
# скрипт пейджера или тому подобное, но не сбрасывать route. Этополезно для
# администраторов, которые хотят заблокировать TCP, но хотят получать
# предупреждения на пейджер/email об UDP и т.д.
#
#
# 0 = Не блокировать UDP/TCP сканирование.
# 1 = Блокировать UDP/TCP сканирование.
# 2 = Запуск внешней команды (KILL_RUN_CMD)
#
# По умолчанию -- 0, но для данного проекта (ШКОЛА 21) -- 1 ##################### <--------------
BLOCK_UDP="1"
BLOCK_TCP="1"

###################
# Сброс маршрутов #
###################
# Эти команды используются для удаления маршрута или
# хоста в локальную таблицу фильтрации.
#
# Шлюз (333.444.555.666) в идеале должен быть неработающий хост
# в локальной подсети. На некоторых хостах вместо него используется
# localhost (127.0.0.1), что дает тот же эффект. ЗАМЕТИМ ЧТО
# 333.444.555.66  НЕ БУДЕТ РАБОТАТЬ, ИЗМЕНИТЕ ЕГО!!
#
# ВСЕ ВАРИАНТЫ KILL_ROUTE ЗАКОМЕНТИРОВАНЫ. Убедитесь, что
# вы раскомментировали правильную строку для вашей ОС.
# Если вашей ОС нет в списке, и у вас есть команда route drop,
# которая работает, пожалуйста, отправьте ее мне, чтобы я мог
# включить ее.
# МОЖЕТ ИСПОЛЬЗОВАТЬСЯ ТОЛЬКО ОДИН ВАРИАНТ KILL_ROUTE!
# НЕ РАСКОММЕНТИРУЙТЕ БОЛЬШЕ ОДНОЙ СТРОКИ!

#
# ПРИМЕЧАНИЯ: Команды маршрутизации это наименее оптимальный
# способом блокировки и не обеспечивают полной защиты от UDP-атак,
# а значит будут генерировать сигналы тревоги как для UDP, так
# и для скрытого сканирования. Я всегда рекомендую вам использовать
# пакетный фильтр, т.к. это соответствует цели.
#
# Обощенный (Generic)
#KILL_ROUTE="/sbin/route add $TARGET$ 333.444.555.666"

# Обощенный (Generic) для Linux
#KILL_ROUTE="/sbin/route add -host $TARGET$ gw 333.444.555.666"

# Новые версии Linux поддерживают сейчас флаг reject. Это лучше, чем
# вышестоящая опция
# KILL_ROUTE="/sbin/route add -host $TARGET$ reject"

# Обощенный (Generic) для BSD (BSDI, OpenBSD, NetBSD, FreeBSD)
#KILL_ROUTE="/sbin/route add $TARGET$ 333.444.555.666"

# Обощенный (Generic) для Sun
#KILL_ROUTE="/usr/sbin/route add $TARGET$ 333.444.555.666 1"

# NEXTSTEP
#KILL_ROUTE="/usr/etc/route add $TARGET$ 127.0.0.1 1"

# FreeBSD
#KILL_ROUTE="route add -net $TARGET$ -netmask 255.255.255.255 127.0.0.1 -blackhole"

# Digital UNIX 4.0D (OSF/1 / Compaq Tru64 UNIX)
#KILL_ROUTE="/sbin/route add -host -blackhole $TARGET$ 127.0.0.1"

# Generic HP-UX
#KILL_ROUTE="/usr/sbin/route add net $TARGET$ netmask 255.255.255.0 127.0.0.1"

##
# Использование пакетного фильтра более предпочтительный метод. Ниже
# перечисленные строки подходят для многих ОС. Помните, вы можете
# раскомментировать только одну строку.
# Опции KILL_ROUTE.
##

# Поддержка ipfwadm для Linux
#KILL_ROUTE="/sbin/ipfwadm -I -i deny -S $TARGET$ -o"
#
# Поддержка ipfwadm для Linux (нет регистрации отклоненных пакетов)
#KILL_ROUTE="/sbin/ipfwadm -I -i deny -S $TARGET$"
#
# Поддержка ipchain для Linux
#KILL_ROUTE="/sbin/ipchains -I input -s $TARGET$ -j DENY -l"
#
# Поддержка ipchain для Linux (нет регистрации отклоненных пакетов)
#KILL_ROUTE="/sbin/ipchains -I input -s $TARGET$ -j DENY"
#
# Поддержка iptables для Linux
#KILL_ROUTE="/sbin/iptables -I INPUT -s $TARGET$ -j DROP"
#
# Поддержка iptables для Linux с лимитами и поддержкой LOG-ов.
# Регистрирует (пишет в лог) только ограниченное количество пакетов,
# чтобы избежать атаки типа «отказ в обслуживании».
# KILL_ROUTE="/sbin/iptables -I INPUT -s $TARGET$ -j DROP && /sbin/iptables -I INPUT -s $TARGET$ -m limit --limit 3/minute --limit-burst 5 -j LOG --log-level DEBUG --log-prefix 'Portsentry: dropping: '"
#
# Для тех, кто работает с FreeBSD (и совместимыми), можете
# использовать их встроенный межсетевой экран.
#
#KILL_ROUTE="/sbin/ipfw add 1 deny all from $TARGET$:255.255.255.255 to any"
#
#
# Для тех, кто работает с ipfilt (OpenBSD и т.д.)
# ИМЕЙТЕ В ВИДУ, ЧТО НУЖНО ИЗМЕНИТЬ external_interface В ДЕЙСТВИТЕЛЬНЫЙ ИНТЕРФЕЙС !!
#
#KILL_ROUTE="/bin/echo 'block in log on external_interface from $TARGET$/32 to any' | /sbin/ipf -f -"
#
# ТЕКУЩИЙ, ДЛЯ ШКОЛЫ 21 ############################################################ <-----------------
# вариант 1
# KILL_ROUTE="/usr/sbin/iptables -I INPUT -s $TARGET$ -j DROP"
# вариант 2 (с логированием)
KILL_ROUTE="/usr/sbin/iptables -I INPUT -s $TARGET$ -j DROP && /usr/sbin/iptables -I INPUT -s $TARGET$ -m limit --limit 3/minute --limit-burst 5 -j LOG --log-level DEBUG --log-prefix 'Portsentry: dropping: '"


##########################
# TCP Обертки (Wrappers) #
##########################
# Этот текст будет добавлен в файл hosts.deny для использования обертками.
# Существует два формата для оберток TCP:
#
# ФОРМАТ 1: Старый стиль -- по умолчанию, когда хост не допускает обработки
# параметров.
#
KILL_HOSTS_DENY="ALL: $TARGET$"
#
# ФОРМАТ 2: Новый стиль -- включенны расширенные опции обработчика.
# Можете убрать или добавить расширенные параметры обработки, но убедитесь,
# что с помощью обратной косой черты экранированы все символы «%»,
# чтобы избежать проблем с записью (типа \%c \%h)
#
#KILL_HOSTS_DENY="ALL: $TARGET$ : DENY"

###################
# Внешние команды #
###################
# Это команда, которая запускается при подключении хоста, может быть любой,
# какой вы хотите (пейджер и типа того). Команда выполняется перед удалением
# маршрута или после, в зависимости от опции KILL_RUN_CMD_FIRST ниже:
#
#
# НЕ РЕКОМЕНДУЮ УСРАИВАТЬ РЕПЕРЕССИЙ ПРОТИВ СКАНИРУЮЩЕГО ХОСТА!
#
# # TCP/IP -- это *без подтверждения подлинности*, и сканирование вашc
# может образоваться «из ниоткуда». Единственное, что достаточно безопасно
# (но не думаю, что разумно) -- запускать скрипт обратной проверки, c
# использыванием «классического» -tcp режима. Этот режим требует полного
# соединения и очень труден для обмана (spoof).
#
# Значение KILL_RUN_CMD_FIRST должно быть установлено в «1», чтобы команда
# запускалась *до блокировки* или «0», чтобы выполнялась *после* блокировки.
#
#KILL_RUN_CMD_FIRST = "0"
#
#
#KILL_RUN_CMD="/some/path/here/script $TARGET$ $PORT$ $MODE$"
# примеры см.: /usr/share/doc/portsentry/examples/


###################################
# Значение триггеров сканирования #
###################################
# Укажем количество подключений к порту, которые разрешено до подачи
# сигнала тревоги. По умолчанию 0 (реагировать немедленно).
# Значение 1 или 2 уменьшит ложные срабатывания. Все, что выше, вероятно,
# ьесполезно. Значение SCAN_TRIGGER должно быть указано обязательно.
# По умолчанию -- 0.
#
# ПРИМЕЧАНИЕ: Если вы используете опцию расширенного обнаружения,
# следует быть осторожным, чтобы не подвесить триггер «на волоске».
# Т.к. расширенный режим будет реагировать на *любой* хост,
# подключающийся к неиспользуемому порту ниже указанного диапазона,
# у вас есть возможность действительно что-то сломать (кто-то невинно
# пытается подключиться к вам через SSL [TCP-порт 443], и вы немедленно
# блокируете их). Возможно вы этого и хотите, но все же, будьте
# вниматеольны.
#
SCAN_TRIGGER="2"
###################################
# Секция заголовка (banner) порта #
###################################
#
# Введите текст, который вы хотите отобразить человеку, которого PortSentry
# отключил. *Не рекомендуется* насмехаться над человеком, так как это
# его разозлит и усугубит ситуацию. Оставьте закомментированным,
# чтобы отключить функцию
#
# Режим определения Stealth сканирования не использует эту возможность.
#
PORT_BANNER="                       .-.    КОШКА-ПАРАНОИДОШКА
                       | |    НЕ ЛЮБИТ САНИРОВАНИЯ
                       | |    ПОРТОВ И ВСЕ ИХ ЛОВИТ
     /\---/\   _,---._ | |
    /-   -  \,'       `. ;
   ( O   O   )           ;
    '.=o=__,'            \
    /         _,--.__  _  \
   /  _ )   ,'      -.  -. \
  / ,' /  ,'          \ \ \ \
 / /  / ,'            (,_)(,_)
(,;  (,,)"
# EOF